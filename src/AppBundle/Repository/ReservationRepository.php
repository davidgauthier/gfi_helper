<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Reservation;
use AppBundle\Entity\User;

/**
 * ReservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReservationRepository extends \Doctrine\ORM\EntityRepository
{
    
    /**
     * Retourne les réservations d'un mois donné (du mois en cours par défaut)
     *
     * @param int $date
     *
     * @return Reservation[]
     */
    public function getReservationsOfAYearMonth($date = null)
    {
        if(null === $date){
            $date = new \DateTime();
        }
        
        $first = $date->format('Y-m-01 00:00:00');
        $last = $date->format('Y-m-t 23:59:59');
        
        return $this->createQueryBuilder('r')
            ->select('r')
            ->where('r.dateBegin >= :first')
            ->setParameter('first', $first)
            ->andWhere('r.dateBegin <= :last')
            ->setParameter('last', $last)
            ->orderBy('r.dateBegin', 'ASC')
            ->getQuery()
            ->getResult();
    }
    
    /**
     * Retourne les réservations d'un user
     *
     * @param User $user
     *
     * @return Reservation[]
     */
    public function getReservationsByUser($user)
    {
        return $this->createQueryBuilder('r')
            ->select('r')
            ->leftJoin('r.user', 'u')
            ->where('u.id = :id_user')
            ->setParameter('id_user', $user->getId())
            ->orderBy('r.dateBegin', 'DESC')
            ->getQuery()
            ->getResult();
    }
    
    
    /**
     * Retourne les futures réservations d'un user
     *
     * @param User $user
     *
     * @return Reservation[]
     */
    public function getFutureReservationsByUser($user)
    {
        $now = new \DateTime();
        $day = $now->format('Y-m-d 00:00:00');
        
        return $this->createQueryBuilder('r')
            ->select('r')
            ->leftJoin('r.user', 'u')
            ->where('u.id = :id_user')
            ->setParameter('id_user', $user->getId())
            ->andWhere('r.dateBegin >= :day')
            ->setParameter('day', $day)
            ->orderBy('r.dateBegin', 'DESC')
            ->getQuery()
            ->getResult();
    }
    
    
    
    /**
     * Retourne les futures réservations d'une room
     *
     * @param Room $room
     *
     * @return Reservation[]
     */
    public function getFutureReservationsByRoom($room)
    {
        $now = new \DateTime();
        $day = $now->format('Y-m-d 00:00:00');
        
        return $this->createQueryBuilder('re')
            ->select('re')
            ->leftJoin('re.room', 'ro')
            ->where('ro.id = :id_room')
            ->setParameter('id_room', $room->getId())
            ->andWhere('re.dateBegin >= :day')
            ->setParameter('day', $day)
            ->orderBy('re.dateBegin', 'ASC')
            ->getQuery()
            ->getResult();
    }


}
